/*
 * Copyright 2022 ES4X
 *
 * ES4X licenses this file to you under the Apache License, version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License.  You may obtain a copy of the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

/**
 * A structure representing a configuration change.
 */
export class ConfigChange {

  constructor();

  constructor(obj: ConfigChange | { [key: string]: any });

  /**
   * Sets the new configuration.
   */
  getNewConfiguration(): { [key: string]: any };

  /**
   * Sets the new configuration.
   */
  setNewConfiguration(newConfiguration: { [key: string]: any }): ConfigChange;

  /**
   * Sets the previous configuration.
   */
  getPreviousConfiguration(): { [key: string]: any };

  /**
   * Sets the previous configuration.
   */
  setPreviousConfiguration(previousConfiguration: { [key: string]: any }): ConfigChange;


  toJson(): { [key: string]: any };
}

/**
 * Options to configure the <code>ConfigRetriever</code>.
 */
export class ConfigRetrieverOptions {

  constructor();

  constructor(obj: ConfigRetrieverOptions | { [key: string]: any });

  /**
   * Enables or disables the inclusion of the default stored in the configuration.
   */
  isIncludeDefaultStores(): boolean;

  /**
   * Enables or disables the inclusion of the default stored in the configuration.
   */
  setIncludeDefaultStores(includeDefaultStores: boolean): ConfigRetrieverOptions;

  /**
   * Configures the scan period, in ms. This is the time amount between two checks of the configuration updates.
   */
  getScanPeriod(): number;

  /**
   * Configures the scan period, in ms. This is the time amount between two checks of the configuration updates.
   */
  setScanPeriod(scanPeriod: number): ConfigRetrieverOptions;

  /**
   * Sets the configuration stores.
   */
  getStores(): ConfigStoreOptions[];

  /**
   * Sets the configuration stores.
   */
  setStores(stores: ConfigStoreOptions[]): ConfigRetrieverOptions;

  /**
   * Sets the configuration stores.
   */
  addStore(stores: ConfigStoreOptions): ConfigRetrieverOptions;


  toJson(): { [key: string]: any };
}

/**
 * Data object representing the configuration of a configuration store. This object describes the configuration of a
 * chunk of configuration that you retrieve. It specifies its type (type of configuration store), the format of the
 * retrieved configuration chunk, and you can also configures the store if it needs configuration to
 * retrieve the configuration chunk.
 */
export class ConfigStoreOptions {

  constructor();

  constructor(obj: ConfigStoreOptions | { [key: string]: any });

  /**
   * Sets the configuration of the store
   */
  getConfig(): { [key: string]: any };

  /**
   * Sets the configuration of the store
   */
  setConfig(config: { [key: string]: any }): ConfigStoreOptions;

  /**
   * Sets the format of the configuration that is retrieved from the store.
   */
  getFormat(): string;

  /**
   * Sets the format of the configuration that is retrieved from the store.
   */
  setFormat(format: string): ConfigStoreOptions;

  /**
   * Sets whether or not the store is optional. When the configuration is retrieve, if an optional store
   * returns a failure, the failure is ignored and an empty json object is used instead (for this store).
   */
  isOptional(): boolean;

  /**
   * Sets whether or not the store is optional. When the configuration is retrieve, if an optional store
   * returns a failure, the failure is ignored and an empty json object is used instead (for this store).
   */
  setOptional(optional: boolean): ConfigStoreOptions;

  /**
   * Sets the configuration type
   */
  getType(): string;

  /**
   * Sets the configuration type
   */
  setType(type: string): ConfigStoreOptions;


  toJson(): { [key: string]: any };
}
