/*
 * Copyright 2022 ES4X
 *
 * ES4X licenses this file to you under the Apache License, version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License.  You may obtain a copy of the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

import { Handler, AsyncResult } from '@vertx/core';

import { Vertx } from '@vertx/core';
import { ReadStream } from '@vertx/core';
import { ConfigRetrieverOptions } from './options';
import { ConfigChange } from './options';

/**
 * Defines a configuration retriever that read configuration from
 * 
 * and tracks changes periodically.
 */
export abstract class ConfigRetriever {
  /**
   * Creates an instance of the default implementation of the {@link ConfigRetriever}.
   */
  static create(vertx: Vertx, options: ConfigRetrieverOptions) : ConfigRetriever;

  /**
   * Creates an instance of the default implementation of the {@link ConfigRetriever}, using the default
   * settings (json file, system properties and environment variables).
   */
  static create(vertx: Vertx) : ConfigRetriever;

  /**
   * Reads the configuration from the different 
   * and computes the final configuration.
   */
  getConfig() : PromiseLike<{ [key: string]: any }>;

  /**
   * Reads the configuration from the different 
   * and computes the final configuration.
   */
  getConfig(completionHandler: ((res: AsyncResult<{ [key: string]: any }>) => void) | Handler<AsyncResult<{ [key: string]: any }>>) : void;

  /**
   * Closes the retriever.
   */
  close() : void;

  /**
   * Gets the last computed configuration.
   */
  getCachedConfig() : { [key: string]: any };

  /**
   * Registers a listener receiving configuration changes. This method cannot only be called if
   * the configuration is broadcasted.
   */
  listen(listener: ((res: ConfigChange) => void) | Handler<ConfigChange>) : void;

  /**
   * Registers a handler called before every scan. This method is mostly used for logging purpose.
   */
  setBeforeScanHandler(handler: ((res: void) => void) | Handler<void>) : ConfigRetriever;

  /**
   * Registers a handler that process the configuration before being injected into {@link ConfigRetriever#getConfig} or {@link ConfigRetriever#listen}. This allows
   * the code to customize the configuration.
   */
  setConfigurationProcessor(processor: (arg: { [key: string]: any }) => { [key: string]: any }) : ConfigRetriever;

  /**
   */
  configStream() : ReadStream<{ [key: string]: any }>;
}
