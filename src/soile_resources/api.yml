openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/THOMASPFAU/SoileAPI/1.0.0
  - description: Soile Backend API
    url: soile.nbe.aalto.fi
info:
  description: This is the Backend API for the Soile webservice.
  version: "1.0.0"
  title: Soile Backend API
  contact:
    email: thomas.pfau@aalto.fi
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: login
    description: Anything connected to login and registration
  - name: project
    description: Operations associated with a project.
  - name: projectexecution
    description: Anything to do with running projects / project instances.
  - name: exeriment
    description: Operations associated with experiments
  - name: user
    description: Operations associated with user modifications
  - name: task
    description: Operations associated with Task operations including requests for task ressources etc.
paths:
  /register:
    post:
      tags: 
        - login 
        - user
      summary: Register a new user. 
      operationId: registerUser
      description: Create a new user for the platform. 
      responses:
        '201':
          description: User created
        '400':
          description: bad input. Can be user already exists, email already exists or similar.
        '409':
          description: User (or email) already exists in the user database. 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: The data for the user to be created (at least, username, password and email are required necessary).          
  /test/auth:
    get:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags: 
        - login 
      summary: Test whether the login is successfull, if successfull indicates the authenticated user.
      operationId: testAuth
      responses:
        '200':
          description: User authenticated successfully
          content: 
            application/json:
                schema:
                  type: object
                  properties:
                    authenticated: 
                      type: boolean
                      description: true if authenticated, false if not.
                    user: 
                      type: string
        '401':
          description: No user authenticated
  /login:
    post:
      tags: 
        - login 
      summary: Login as a user
      operationId: loginUser
      description: Log in as a user, receive an access token.
      responses:
        '200':
          $ref: '#/components/responses/LoginSuccessful'     
        '400':
          description: bad input parameter
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
                type: object
                properties:
                  username: 
                    type: string
                    description: the username
                  password: 
                    type: string
                    description: the password
                  remember:
                    type: string
                    description: whether to create a cookie to remember the login for more than a session.. has to be "1" or "0"
                    example: "1"
          application/json:
            schema:
              type: object
              properties:
                username: 
                  type: string
                  description: the username
                password: 
                  type: string
                  description: the password
                remember:
                  type: string
                  description: whether to create a cookie to remember the login for more than a session.. has to be "1" or "0"
                  example: "1"
        description: Login Data, containing username and password in the same schema as the User. 
        
  /user/list:
    get:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - user
      summary: Get a list of users
      operationId: listUsers
      description: |
        Get a list of users with properties and users listed depending on the level of access of the request
      parameters:
        - in: query
          name: searchString
          description: pass an optional search string for looking up users
          required: false
          schema:
            type: string
        - in: query
          name: skip
          required: false
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          required: false
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: search results matching criteria, content depends on the access level of the request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserInfo'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: bad input parameter
  /user/create:
    post:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - user
      summary: Create a user
      operationId: createUser
      description: Adds a user to the system
      responses:
        '201':
          description: User created
        '400':
          description: 'invalid input, object invalid'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          $ref: '#/components/responses/UserExists'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: The data for the user to be created (at least, username, password and email are required necessary).
  /user/delete:
    post:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - user
      summary: Create a user
      operationId: removeUser
      description: Remove a user from the system. Must either be requested by the user or an authorized user (i.e. Admin)).
      responses:
        '202':
          description: User deleted
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call 
        '410':
          $ref: '#/components/responses/UserDoesNotExist'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username: 
                  type: string
                  description: the username of the user to delete
                deleteFiles:
                  type: boolean
                  description: "Whether to delete all information for this user from any projects"
  /user/info:
    get:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - user
      summary: Get details of a user
      operationId: getUserInfo
      description: Get the details of a user (not the password obviously).
      parameters:
        - name: username
          in: query
          required: true
          description: Username for which info is requested
          schema:
            type : string
            
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestrictedUserInfo'
          description: The details of the user, no password is supplied... 
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call 
        '410':
          $ref: '#/components/responses/UserDoesNotExist'
    post:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - user
      summary: Set details of a user
      operationId: setUserInfo
      description: Set the details of a user.
      requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestrictedUserInfo'
          description: The details of the user, no password is supplied... 
      responses:
        '200':
          description: "Successful update"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call 
        '410':
          $ref: '#/components/responses/UserDoesNotExist'
          
  /user/setpassword:
    post:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - user
      summary: Set password of a user
      operationId: setPassword
      description: Set the password of a user.
      requestBody:
          content:
            application/json:
              schema:
                type: object
                required:
                  - username
                  - password
                properties:
                  username:
                    type: string
                    example: MyUser
                    description: Must not include any @ symbols
                  password:
                    type: string
                    description: the new password
          description: The details of the user, no password is supplied... 
      responses:
        '200':
          description: "Successful update"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call 
        '410':
          $ref: '#/components/responses/UserDoesNotExist'
  /user/setrole:
    post:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - user
      summary: Set the access groups of a user account. 
      operationId: setRole
      description: Set the role of a user account.Only Admins can set roles
      responses:
        '200':
          description: Role updated
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: 'User has no authorization to make this call'
        '410':
          $ref: '#/components/responses/UserDoesNotExist'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: MyUser
                  description: Must not include any @ symbols
                role:
                  type: string
                  example: "Admin"
  /user/setpermissions:
    post:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - user
      summary: Set the access groups of a user account. 
      operationId: permissionChange
      description: Set the roles and permissions of a user account. Admins can set all groups/permissions, users can set permissions for Experiments they own.
      responses:
        '200':
          description: Roles updated
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: 'User has no authorization to make this call'
        '410':
          $ref: '#/components/responses/UserDoesNotExist'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: MyUser
                  description: Must not include any @ symbols
                command:
                  type: string
                  example: 'setCommand'
                  description: the type of change. setCommand will replace any permissions currently present, addCommand will add permissions, removeCommand will remove them.
                permissionsProperties:
                  type: object
                  properties:
                    elementType: 
                      type: string
                      description: "whether the permission is a 'task', 'project', 'experiment' or 'instance'"
                      example: "instance"
                    permissionSettings:
                      $ref : '#/components/schemas/PermissionsSettings'
                    
        description: With command set to setCommand, body needs both permissions and roles and will replace permissions, if the requestor has the permissions to do so.
                     With add/delete Command only the added or deleted Roles/permissions need to be supplied.
  /user/getaccess:
    get:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - user
      summary: Get the permissions of a specified user. 
      operationId: permissionOrRoleRequest
      description: Get the permissions of a specified user.
      parameters:
        - name: username
          in: query
          required: true
          description: Username for which info is requested
          schema:
            type : string
            
      responses:
        '200':
          $ref: '#/components/responses/AccessOfUser'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call 
        '410':
          $ref: '#/components/responses/UserDoesNotExist'
  /task/list:
    get:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - task
      summary: Get a list of all tasks.
      operationId: getTaskList
      description: Get a list of all public tasks, a task could be private, in which case it is only shown, if the user has access.
      responses:
        '200':
          description: A List of tasks, with names and IDs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectList'      
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call 
  /task/{id}/list:
    get:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - task
      summary: Get a list of all tagged versions of a specific task
      operationId: getVersionsForTask
      description: Get a list of all tagged versions of a task, a task could be private, in which case access can be denied
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the task for which versions are requested
          schema:
            type : string
            
      responses:
        '200':
          description: A List of tasks versions, with Tags and Date information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElementVersions'
                
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call 
        '410':
          $ref: '#/components/responses/ResourceDoesNotExist' 
  /task/create:
    get:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - task
      summary: Create a new task
      operationId: createTask
      description: Create a new empty task and get a UUID as well as an initial version for it.
      parameters:
        - name: name
          in: query
          required: true
          description: Name of the Task
          schema:
            type : string
            
        - name: codeType
          in: query
          required: true
          description: Name of the Task
          schema:
            type : string
            
            example: "javascript"
            description: The type of code used for this task. This is not changeable after creation.
      responses:
        '200':
          description: New Task created
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/Task'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call 
  /task/{id}/{version}/:
    get:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - task
      summary: Get the specified task at the specified version
      operationId: getTask
      description: Get the specifications of a task
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the task
          schema:
            type : string
            
        - name: version
          in: path
          required: true
          description: version of the requested task, can be either a tag or a commit id
          schema:
            type : string
            
      responses:
        '200':
          description: The task specification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call 
        '410':
          $ref: '#/components/responses/ResourceDoesNotExist'  
    post:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - task
      summary: Update a Task 
      operationId: updateTask
      description: Updates the task with the provided code. 
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the task
          schema:
            type : string
            
        - name: version
          in: path
          required: true
          description: version of the task to update
          schema:
            type : string
            
      responses:
        '200':
          $ref: '#/components/responses/ObjectUpdated'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call 
        '410':
          $ref: '#/components/responses/ResourceDoesNotExist'  
      requestBody:
        content:
          application/json:
            schema:
             $ref: '#/components/schemas/Task'
        description: In addition to the required fields, this submission also needs a tag. Otherwise the only way to obtain this version again is by providing the returned version id.
        
  /task/{id}/{version}/resource/{file}:
    get:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - task
      summary: Get the specified resource for the task at the given version
      operationId: getResource
      description: Get a resource from a task. 
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the task
          schema:
            type : string
            
        - name: version
          in: path
          required: true
          description: version of the requested task, can be either a tag or a commit id
          schema:
            type : string
            
        - name: file
          in: path
          required: true
          description: The file requested (simple filename request)
          schema:
            type : string
            
          example: "car.png"
      responses:
        '200':
          description: The requested file, headers set according to the file name/type. 
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call 
        '410':
          $ref: '#/components/responses/ResourceDoesNotExist'   
    post:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - task
      summary: Put a resource to a task at a specific version
      operationId: putResource
      description: Update or add a file to the specified task
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the task
          schema:
            type : string
            
        - name: version
          in: path
          required: true
          description: version of the requested task, can be either a tag or a commit id
          schema:
            type : string
            
        - name: file
          in: path
          required: true
          description: The file requested (simple filename request)
          schema:
            type : string
            
          example: "car.png"
      responses:
        '200':
          $ref: '#/components/responses/ObjectUpdated'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call 
        '410':
          $ref: '#/components/responses/ResourceDoesNotExist'  
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary


  /project/list:
    get:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - project
      summary: Get a list of all projects.
      operationId: getProjectList
      description: Get a list of all projects which you have general access to.
      responses:
        '200':
          description: A List of Projects, with names and IDs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call 
          
  /project/{id}/list:
    get:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - project
      summary: Get a list of all versions of a specific Project
      operationId: getVersionsForProject
      description: Get a list of all Versions of a Project, can be denied if no access to project.
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the task for which versions are requested
          schema:
            type : string
            
      responses:
        '200':
          description: A List of project versions, with Tags and Date information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElementVersions'    
                
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call 
        '410':
          $ref: '#/components/responses/ResourceDoesNotExist'  
  /project/create:
    get:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - project
      summary: Create a new task
      operationId: createProject
      description: Create a new poject and get a UUID as well as an initial version for it.
      parameters:
        - name: name
          in: query
          required: true
          description: Name of the Project
          schema:
            type : string
            
      responses:
        '200':
          description: New Project created providing a UUID. 
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call 
  /project/{id}/{version}/:
    get:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - project
      summary: Get the specified Project at the specified version
      operationId: getProject
      description: Get a project at the specified version (commonly latest).
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the task
          schema:
            type : string
            
        - name: version
          in: path
          required: true
          description: version of the requested task, can be either a tag or a commit id or latest, which would refer to the latest commit. 
          schema:
            type : string
            
      responses:
        '200':
          description: The task specification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call 
        '410':
          $ref: '#/components/responses/ResourceDoesNotExist' 
    post:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - project
      summary: Update a Project 
      operationId: updateProject
      description: Updates the The project with the provided 
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the Project
          schema:
            type : string
            
        - name: version
          in: path
          required: true
          description: version of the project to update, this will make this version the latest version.
          schema:
            type : string
            
      responses:
        '200':
          $ref: '#/components/responses/ObjectUpdated'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call 
        '410':
          $ref: '#/components/responses/ResourceDoesNotExist' 
      requestBody:
        content:
          application/json:
            schema:
             $ref: '#/components/schemas/Project'
        description: In addition to the required fields, this submission also needs a tag. Otherwise the only way to obtain this version again is by providing the returned version id.
  /projectexec/{id}/data/list:
    get:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - projectexecution
      summary: Get a list of result data downloadable for the specific project
      operationId: listDownloadData
      description: "Get a list of all data that is available for a project. There are multiple different pieces of data, which can be available and which will be listed, that include: 1. Form-Data, which is all data that can be directly obtained from questionaires clicks etc (i.e. any small-scale data). 2. Video data, for each participant. 3. Audio Data for each participant. 4. binary data for each participant (in whichever format it was stored in). Data is associated with tasks in the experiment."
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the Project
          schema:
            type : string
            
      responses:
        '200':
          description: A json containing identifiers for all data in the experiment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailableDataScheme'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call 
  /project/{id}/{version}/start:
    post:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - project
        - projectexecution
      summary: start a project
      operationId: startProject
      description: Start a project, making it available to the outside world. 
                   Once a project is started the started instance cannot be modified any more. 
                   You can delete a started instance, or stop it, but it is fixed at a version of the project.
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the Project
          schema:
            type : string
            
        - name: version
          in: path
          required: true
          description: version of the project to update, this will make this version the latest version.
          schema:
            type : string
            
      responses:
        '200':
          description: Project was successfully initilized
          content:
            application/json:
              schema:
                type: object
                properties:
                  projectID: 
                    type: string
                    description: The projectid of the active project, to be used with all end-points that have {id} path names
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call 
        '410':
          $ref: '#/components/responses/ResourceDoesNotExist'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - private
                - name
              properties:
                private: 
                  type: boolean
                  description: Whether special access is required for this project
                name: 
                  type: string
                  description: a name for the instance. Must be unique or it will fail.
                shortcut:
                  type: string
                  description: a shortcut that can be used to more easily access the contents.
        description: This can be an empty body, then the whole data is requested.
  /projectexec/list:
    get:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - projectexecution
      summary: Get a list of all projects.
      operationId: getRunningProjectList
      description: Get a list of all projects which are currently running and that you have access to.
      responses:
        '200':
          description: A List of Projects, with names and IDs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call 
          
  /projectexec/{id}/stop:
    post:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - projectexecution
      summary: stop a project
      operationId: stopProject
      description: Stop a project, disabling the project from execution.
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the Project
          schema:
            type : string
            
      responses:
        '200':
          description: Project was successfully stopped
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call 
        '410':
          $ref: '#/components/responses/ResourceDoesNotExist' 
  /projectexec/{id}/restart:
    post:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - projectexecution
      summary: restart a project that was previously stopped
      operationId: restartProject
      description: Restarting a previously stopped project. 
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the Project
          schema:
            type : string
      responses:
        '200':
          description: Project was successfully restarted
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call 
        '410':
          $ref: '#/components/responses/ResourceDoesNotExist' 
  /projectexec/{id}/delete:
    get:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - projectexecution
      summary: Delete a project instance and all associated data. 
      operationId: deleteProject
      description: "DANGER: This endpoint will delete ALL data associated with the given project. 
                    It will stop the project from execution and will irreversibly delete all participant 
                    information currently stored for this project instance."
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the Project
          schema:
            type : string
            
      responses:
        '200':
          description: Project was successfully deleted.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call 
        '410':
          $ref: '#/components/responses/ResourceDoesNotExist' 
  /projectexec/{id}/data:
    post:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - projectexecution
      summary: Get the result data for a project  
      operationId: getProjectResults
      description: "This is the general access point for data retrieval for projects. A simple request without any body will generate one huge tar file with all data while individual files can be requested using the same scheme as returned under the   /project/{id}/data/list endpoint. This post will return an ID that can then be downloaded via /project/{id}/download/{downloadid}, where a tar file is waiting for download."
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the Project
          schema:
            type : string
      responses:
        '200':
          description: a json containing the download ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  downloadID: 
                    type: string
                    description: An id that can be used with the /project/{id}/download/{downloadid} endpoint. Has to have the form of a uuid
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call        
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObtainDataScheme'    
        description: This can be an empty body, then the whole data is requested.  
  /projectexec/{id}/download/{downloadid}:  
    get:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - projectexecution
      summary: Download the collected results from a request.
      operationId: downloadResults
      description: "This request will make a zipped data file available for download. NOTE: Upon request, the file might not exist yet, and is just being created. Files will be cleared reguarily to avoid massive buildup of intermediary tar files."
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the Project
          schema:
            type : string
            
        - name: downloadid
          in: path
          required: true
          description: UUID of the download
          schema:
            type : string
                        
      responses:
        '200':
          description: A tar file containing the requested data
          content:
            application/tar:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call                     
  /projectexec/{id}/download/{downloadid}/check:  
    get:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - projectexecution
      summary: Check, whether the specified download is ready.
      operationId: downloadTest
      description: This Request tests, whether the specified download is ready. A Json will be replied to indicate whether the download creation was successfull/failed or is still in progress.
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the Project
          schema:
            type : string
            
        - name: downloadid
          in: path
          required: true
          description: UUID of the Project
          schema:
            type : string
                        
      responses:
        '200':
          description: Status of the download
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                properties:
                  status: 
                    type: string
                  problems:
                    type: array
                    items: 
                      type: string
                      description: Textual descriptions of issues that arose during creation of this download.
                    description: can be empty or not existant in which case no issues happened
                    
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call            
  /projectexec/{id}/submit:  
    post:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - projectexecution
      summary: submit data for the current task of the authorized user in the project
      operationId: submitResults
      description: "Submit results for a job using a json, containing both output data and result data. Result data needs to point to file ids generated from the uploaddata endpoint or be contained in a flat json object depth 1). Output data needs to be provided in a flat json object as well. Calling this will finish this task and proceed the user to the next task. The reply contains the new task for this user. "
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the Project
          schema:
            type : string
            
      responses:
        '200':
          description: Submission succesful
          
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call            
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskData'
  /projectexec/{id}/getTaskType:  
    get:
      security:
        - cookieAuth: []
        - JWTAuth: []
        - tokenAuth: []
      tags:
        - projectexecution
      summary: Get the next unfinished task for the authorized user. 
      operationId: getTaskType
      description: "Get the ID of the current task for the authorized user."
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the Project
          schema:
            type : string
            
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: 
                  codeType:
                    type: string
                    description: the code type (javascript for psychoJS, qmarkup or elang for soile questionaire markup and experiment language)
                    example: "qmarkup"
                  finished:
                    type: boolean
                    description: Whether this project is finished. clear indicator that this is finished in addition to the next property being undefined.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call
  /projectexec/{id}/execute:  
    get:
      security:
        - cookieAuth: []
        - JWTAuth: []
        - tokenAuth: []
      tags:
        - projectexecution
      summary: Get the next unfinished task for the authorized user. 
      operationId: runTask
      description: >-
                   Get the code for the current Task for the user (calling this repeatedly will return the same code multiple times.
                   The codeType for the task needs to be obtained from the getNextTaskType end-point before running this task
                   in order to know how to interpret the returned code. 
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the Project instance
          schema:
            type : string
            
      responses:
        '200':
          description: Success
          content:
            application/javascript:
              schema:
                type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call
        '406':
          description: User is finished.
  /projectexec/{id}/signUp:  
    get:
      security:
        - {} # Security on this endpoint is optional. Calling this in an authenticated manner will add a user to the participant. Calling it in a non authenticated manner will create a token that can be used for future authentication.
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - projectexecution
      summary: signUp for a project with a one-time signUp Code. 
      operationId: signUpForProject
      description: >-
                   Sign up to a project with a one time SignUp Code
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the Project instance
          schema:
            type : string
        - name: token
          in: query
          schema:
            type: string
          required: true
      responses:
        '200':
          description: The authenticated user is now signed up.
          content:
            application/json:
              schema:
                type: string
                example: abcdef-gehikl23541-4526-234
                description: The token to use. If this was an authenticated user, no token is returned, but a participant is associated to the user
        
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: Code invalid
        '406':
          description: User is finished.
          
#  /projectexec/{id}/addCollaborators:  
#    get:
#      security:
#        - cookieAuth: []
#        - JWTAuth: []
#      tags:
#        - projectexecution
#      summary: Get the next unfinished task for the authorized user. 
#      operationId: addCollaborator
#      description: >-
#                   Add a collaborator to the project. The collaborator will have READ/WRITE access to the project. i.e. they can download the data of participants etc.
#                   The can NOT modify the project itself or stop/restart the project.
#      parameters:
#        - name: id
#          in: path
#          required: true
#          description: UUID of the Project instance
#          schema:
#            type : string
#            
#      responses:
#        '200':
#          description: Success
#        '401':
#          $ref: '#/components/responses/UnauthorizedError'
#        '400':
#          description: 'Users not found or not Researchers'
#        '403':
#          description: User has no authorization to make this call
#      requestBody:
#        content:
#          application/binary:
#            schema:
#              type: array
#              items: 
#                type: string
#                description: The usernames of the collaborators to add. Collaborators must have Admin or Researcher roles!

  /projectexec/{id}/uploaddata:  
    post:
      security:
        - cookieAuth: []
        - JWTAuth: []
        - tokenAuth: []
      tags:
        - projectexecution
      summary: Upload large result data for a project
      operationId: uploadData
      description: "Upload large content for a participant. The data must be for the current task of the authenticated user in the project indicated."
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the Project
          schema:
            type : string
            
      responses:
        '200':
          description: Upload finished successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: the UUID of the uploaded file to be resupplied to /project/{id}/submit. Has to have the form of a uuid
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call            
      requestBody:
        content:
          application/binary:
            schema:
              type: string
              format: binary
              description: the file to upload
  /experiment/list:
    get:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - experiment
      summary: Get a list of all experiments.
      operationId: getExperimentList
      description: Get a list of all experiments which you have general access to.
      responses:
        '200':
          description: A List of experiments, with names and IDs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectList'    
                
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call 
          
  /experiment/{id}/list:
    get:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - experiment
      summary: Get a list of all versions of a specific experiment
      operationId: getVersionsForExperiment
      description: Get a list of all Versions of a experiment, can be denied if no access to experiment.
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the task for which versions are requested
          schema:
            type : string
            
      responses:
        '200':
          description: A List of experiment versions, with Tags and Date information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElementVersions'    
                
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call 
        '410':
          $ref: '#/components/responses/ResourceDoesNotExist'
  /experiment/create:
    get:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - experiment
      summary: Create a new task
      operationId: createExperiment
      description: Create a new empty task and get a UUID as well as an initial version for it.
      parameters:
        - name: name
          in: query
          required: true
          description: UUID of the task
          schema:
            type : string
            
      responses:
        '200':
          description: New Task created providing a UUID. 
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/Experiment'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call 
          
  /experiment/{id}/{version}/:
    get:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - experiment
      summary: Get the specified experiment at the specified version
      operationId: getExperiment
      description: Get a experiment at the specified version (commonly latest).
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the task
          schema:
            type : string
            
        - name: version
          in: path
          required: true
          description: version of the requested experiment, can be either a tag or a commit id or latest, which would refer to the latest commit.
          schema:
            type : string
            
      responses:
        '200':
          description: The task specification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experiment'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call 
        '410':
          $ref: '#/components/responses/ResourceDoesNotExist'
    post:
      security:
        - cookieAuth: []
        - JWTAuth: []
      tags:
        - experiment
      summary: Update a experiment 
      operationId: updateExperiment
      description: Updates the The experiment with the provided 
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the experiment
          schema:
            type : string
            
        - name: version
          in: path
          required: true
          description: version of the experiment to update, this will make this version the latest version.
          schema:
            type : string
            
      responses:
        '200':
          $ref: '#/components/responses/ObjectUpdated'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: User has no authorization to make this call 
        '410':
          $ref: '#/components/responses/ResourceDoesNotExist'
      requestBody:
        content:
          application/json:
            schema:
             $ref: '#/components/schemas/Experiment'
        description: In addition to the required fields, this submission also needs a tag. Otherwise the only way to obtain this version again is by providing the returned version id.          
components:
  schemas:
    User:
      allOf:
        - $ref: '#/components/schemas/RestrictedUserInfo'
        - type: object
          properties:
            password:
              type: string
              example: '****sss***'
            permissions:
              type: array
              items: 
                type: string
              description: Can only be set by an admin
    DBUser:
      allOf:
        - $ref: '#/components/schemas/UserInfo'
        - $ref: '#/components/schemas/RestrictedUserInfo'
        - type: object
          properties:
            id:
              type: string
              description: The unique id of this user. Has to have the form of a uuid
              example: d290f1ee-6c54-4b01-90e6-d701748f0851
            password:
              type: string
              example: '****sss***'
            participantIn:
              type: array
              items:
                type: object
                properties:
                  uuid: 
                    type: string
                    description: the uuid of the project instance. Has to have the form of a uuid
                  participantID:
                    type: string
                    description: The users ID within a Project. Has to have the form of a uuid  
    UserInfo:
      type: object
      required:
        - username
      properties:
        username:
          type: string
          example: MyUser
          description: Must not include any @ symbols
          
    RestrictedUserInfo:
      allOf:
        - $ref: '#/components/schemas/UserInfo'
        - type: object
          properties:
            fullname:
              type: string
              example: Jon Doe
            email:
              type: string
              example: 'me@domain.org'
              description: must be a valid email address
            userRole:
              type: string
              description: The user Role, can only be changed by an admin. If supplied, it is necessary to be an admin, or the access will fail even if no change happened.
    dbData:
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/stringDBData'
          - $ref: '#/components/schemas/outputData'
    fileData:
      type: array
      items:
        type: object
        required: 
          - targetid
          - fileformat
          - filename
        properties: 
          fileformat:
            type: string
            description: The (mime) format of the stored file.
          filename: 
            type: string
            description: the supposed file name of a supplied file.
          targetid:
             type: string
             description: The ID of the file. This is the value returned by the /project/{id}/uploadData endpoint.
    stringDBData:
      type: object
      required: 
        - name
        - value
      properties:
        name: 
          type: string
          description: the name of the output, the format is "[0-9A-Za-z]+"
          example: "smoker"
        value:
          type: string
          description: The value of an output (within outputData this can only be a number)
        timestamp:
          type: string
          format: date
    outputData:
      type: object
      required: 
        - name
        - value
      properties:
        name: 
          type: string
          description: the name of the output, the format is "[0-9A-Za-z]+"
          example: "smoker"
        value:
          type: number 
          description: The value of an output (within outputData this can only be a number)
        timestamp:
          type: string
          format: date
    resultData:
      oneOf:
        - $ref: '#/components/schemas/TaskResults'
        - $ref: '#/components/schemas/ParticipantResults'
        - type: object
          description: All Data for all Tasks in a project
          properties:
            project: 
              type: object
              properties: 
                id: 
                  type: string
                name: 
                  type: string
            taskResults:
              type: array
              items:
                $ref: '#/components/schemas/TaskResults'
        - type: object
          description: All Data for all Participants in a project
          properties:
            project: 
              type: object
              properties: 
                id: 
                  type: string
                name: 
                  type: string
            participantResults:
              type: array
              items:
                $ref: '#/components/schemas/ParticipantResults'
    PermissionsSettings:
      type: array
      items:
        type: object
        properties: 
          type: 
            type: string
            description: "What type of permission, can be one of READ, READ_WRITE, FULL, READ access to instances allows executing the project but doesn't allow access to the data (except your own data)"
          target: 
            type: string
            example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
            description: the uuid of the target item.   
    Participant:
      description: An Entry in this database represents one participant in one project.
                   Data relevant for this project is stored in each document e.g. the position in the project, data from the project etc. 
      type: object
      properties:
        _id: 
          type: string
          description: The UUID of this participant. Has to have the form of a uuid
        token:
          type: string
          description: optional token. if a participant has a token, this token can be used to authenticate to run a specific project with a given 
        project:
          type: string
          description: The project this participant is in.
        currentStep:
          type: integer
          description: the current step of the user.
        steps:
          type: array
          items: 
            type: string
            description: the tasks performed in this order (instanceIDs)
        activeExperiments:
          type: array
          items:
            type: string
            description: instanceIDs of active experiments.
        modifiedStamp:
          type: integer
          format: int64
          description: "Time stamp for modification"
        position: 
          type: string
          description: the uuid of the element in the project this user is currently at. Has to have the form of a uuid
          default: the project uuid if the user just started.
        finished: 
          type: boolean
          description: If the participant is finished with the project.
        finishedExperimentTasks: 
          type: array
          items:
            type: object
            properties: 
              experimentID:
                type: string
                description: uuids of the experiment with finished tasks
              tasks:
                type: array
                items:
                  type: string
                  description: uuids of the experiment with finished tasks
        outputData: 
          type: array
          items:
            type: object
            required: 
              - task
              - outputs
            properties:
              task: 
                type: string
                description: The task for which data is being stored. Contains one entry for each defined output of a task.
              outputs:
                $ref: '#/components/schemas/outputData'
        resultData: 
          type: array
          description: an array of output data. 
          items:
            type: object
            description: The task for which data is being stored. Data from this task.  
            properties:
              task: 
                type: string
                description: "Has to follow the format t[a-z0-9]+-[a-z0-9]+-[a-z0-9]+-[a-z0-9]+-[a-z0-9]"
              step:
                type: integer
                description: "Indicator of which step this was for the user in the project"
              dbData:
                $ref: '#/components/schemas/dbData'
              fileData:
                $ref:  '#/components/schemas/fileData'
    ParticipantResults:
      type: object
      description: All data for one particpant
      properties:
        participantID: 
          type: string
        resultData:
          type: array
          description: an array of output data. 
          items:
            type: object
            description: The task for which data is being stored. Data from this task.  
            properties:
              task: 
                type: string
                description: "Has to follow the format t[a-z0-9]+-[a-z0-9]+-[a-z0-9]+-[a-z0-9]+-[a-z0-9]"
              step:
                type: integer
                description: "Indicator of which step this was for the user in the project"
              dbData:
                 $ref: '#/components/schemas/dbData'
              files:
                type: array
                items: 
                  type: string
                  description: names of the files in the zip.
    TaskResults:
      type: object
      description: ResultData for ONE task
      properties:
        taskID: 
          type: string
        taskName:
          type: string
        resultData:
          description: NOTE! A participant can occur multiple times in this array if they happened to do this task in multiple different steps.
          type: array
          items:
            type: object
            properties:
              step: 
                type: integer
                description: The step in which the participant got result.
              particpantID: 
                type: string
              dbData:
                $ref: '#/components/schemas/dbData'
              files: 
                type: array
                items: 
                  type: string
                  description: names of the files in the zip.
    TaskData:
      type: object
      required:
        - taskID
        - resultdata
        - outputdata
      description: Data sumitted for a specific task. 
      properties:
        taskID: 
          type: string
          description: The ID of the task this data belongs to.
        outputdata:
          $ref: '#/components/schemas/dbData'
        resultdata:
          type: object
          properties:
            jsonData:
              $ref: '#/components/schemas/dbData'
            fileData:
              $ref: '#/components/schemas/fileData'
    
    BasicElementData:
      type: object
      required:
        - UUID
        - name
      properties:
        UUID:
          type: string
          description: Has to have the form of a uuid (from a mongoDB ID)
          example: 507f1f77bcf86cd799439011
        name:
          type: string
          example: Name of the element
        version:
          type: string
          description: This is the version (in form of a githash) of this element. When submitting a new version this field should be empty. It is however provided when requesting a specific version.
          example: dd6de3fddf28e769ef80808db277608ae9b76ead
        tag:
          type: string
          description: A Tag that either is assciated with the given version, or should be associated with it. When submitted with an update, the corresponding version will be tagged with this tag.
        private: 
          type: boolean
          description: Whether this element is private or generally accessible. If not set, can be accessed by anyone.
    ElementInstance:
      type: object
      required:
        - instanceID
      properties:
        instanceID:
          type: string
          example: t83297d7785fd249bdb6543a850680e812ce11873df2d48467cb9612dbd0482bf
          description: The Unique ID of this element within its project. This is a string of the form "\w + sha256" where \w depends on the type of object. (e.g. t for task, e for experiment etc.) This ID must be unique for each element (or subelement in a project and in an experiment. i.e. two experiments in the same project cannot have elements with the same instanceID)
          
    ElementVersions:
      type: array
      items:
        type: object
        required:
          - version
          - date
        properties:
          tag: 
            type: string
          version:
            type: string
          date:
            type: string
            example: "2022-07-06T18:22"
            
    ObjectList:
      type: array
      items:
        type: object
        properties:
          uuid: 
            type: string
            description: Has to have the form of a uuid
          name:
            type: string
            
    DBElement:
      type: object
      properties:
        name:
          type: string
          description: "Name of the project"
        _id:
          type: string
          example: 12345asasdadf32fds
          description: "UUID of the project"
        private:
          type: boolean
          description: whether the project is private or publicly viewable
        visible:
          type: boolean
          description: Whether to list this Element, a deleted Element gets its visibility set to false and will be deleted if no other element refers to it any more.
                       As long as there are still links to its id in other tasks 
        versions:
          type: array
          items:
            type: object
            properties:
              version: 
                type: string
                description: This is a version (in form of a githash) of this project
                example: dd6de3fddf28e769ef80808db277608ae9b76ead
              timestamp:
                type: integer
                format: int64
                description: a timestamp in int64 (long format i.e. milliseconds)
        tags:
          type: array
          items:
            type: object
            properties:
              tag:
                type: string
                description: A tag identifying a version of the project
              version: 
                type: string
                description: This is a version (in form of a githash) of this project
                example: dd6de3fddf28e769ef80808db277608ae9b76ead
                
                
    Task:
      allOf:
        - $ref: '#/components/schemas/BasicElementData'
        - $ref: '#/components/schemas/TaskProperties'
        - type: object
          properties:
            code:
              type: string
              example: "... Multiline actual code ..."
              description: The code of this task. 
            tag:
              type: string
              description: A Tag for this version, will be used to retrieve actual versions of the task. Must be a valid github tag id
          description: A Task is the smallest unit within a project and commonly specifies a questionaire or test like e.g. a reaction test. The optional fields are required if the task is an instance within an experiment. The required fields only represent the task template as stored in the task database.
          
    TaskInstance:
      allOf:
        - $ref: '#/components/schemas/BasicElementData'
        - $ref: '#/components/schemas/ElementInstance'
        - type: object
          properties:
            filter: 
              type: string
              example: Task1.output1 * Task2.output2 > 4
              description: A Filter that indicates whether this task will be run. Must refer to output elements specified in other Tasks. This must be a valid mathematical formula that can be parsed.
            outputs:
              type: array
              items:
                type: string
                example: output1
              description: All outputs that this task provides which should be available for filtering outside this task within its project. Must be outputs generated in this task!
            next:
              type: string
              example: t83297d7785fd249bdb6543a850680e812ce11873df2d48467cb9612dbd0482bf
              description: Which element to perform after this task, cannot point back to itself! And will only be present in instances not in the generation step. This has the same
                This will need to opint to an instanceID of another task or experiment. 
            codeType:
              type: string
              example: qlang
              description: What kind of code this task has, either elang (soile experiment language), qlang (soile questionaire language), or javascript (PsychoJS code)
              
    DBTask:
      allOf: 
        - $ref: '#/components/schemas/DBElement'
        - $ref: '#/components/schemas/TaskProperties'
          
    TaskProperties:
      type: object
      properties:
        codeType:
          type: string
          example: qlang
          description: What kind of code this task has, either elang (soile experiment language), qlang (soile questionaire language), or (PsychoPy)javascript
        resources:
          type: array
          items: 
            type: string
            example: "images/apple.jpg"
          description: names of resources used in this task. This will be used based on the task UUID and version to obtain the correct files.      
    
    FilterInstance:
      allOf:
      - $ref: '#/components/schemas/ElementInstance'
      - type: object
        required: 
          - defaultNext
        properties:
          options: 
            description: Filters participants into one of the available options. 
                         filters should be mutually exclusive otherwise no guarantee is given as to which fitting filter will be used.
            type: array
            items: 
              type: object
              properties: 
                filter: 
                  type: string
                  example: TaskInstanceID1.output1 * TaskInstanceID2.output2 > 4
                  description: A Filter that indicates whether the next element used is the next of this item. Filter should be mutually exclusive
                next: 
                  type: string
                  example: t83297d7785fd249bdb6543a850680e812ce11873df2d48467cb9612dbd0482bf
                  description: Which element to perform after this task, cannot point back to itself! And will only be present in instances not in the generation step. This has the same
                    This will need to opint to an instanceID of another task or experiment.
          defaultOption:
                  type: string
                  example: t83297d7785fd249bdb6543a850680e812ce11873df2d48467cb9612dbd0482bf
                  description: Which element to perform after this Filter if no option fits the given user. If this is empty, or doesn't exist, the assumption is that this is the end of the element (i.e. in an experiment, it points back to the experiment, or in a project it indicates that this project is finished after this filter). If in an experiment in a project, this must point to the experiment if it is the last entry in the experiment (i.e. it can't be empty)
    Experiment:
      allOf:
        - $ref: '#/components/schemas/BasicElementData'
        - $ref: '#/components/schemas/ExperimentProperties'
      description: An experiment, either a general Experiment or an instance within a project.              
              
    ExperimentInstance:
      allOf:
        - $ref: '#/components/schemas/ExperimentProperties'
        - $ref: '#/components/schemas/ElementInstance'
        - type: object
          properties:
            next:
              type: string
              example: t83297d7785fd249bdb6543a850680e812ce11873df2d48467cb9612dbd0482bf
              description: Which element to perform after this task, cannot point back to itself! And will only be present in instances not in the generation step. This has the same
                This will need to opint to an instanceID of another task or experiment. 
            randomize: 
              type: boolean
              description: Whether the order of execution of the tasks in this experiment is randomized. If they are, no item in elements is allowed to be a filter. If randomized, all tasks and experiments in this experiment must point to this experiment as their next item.
    ExperimentProperties:
      type: object
      properties:
        elements:
          type: array
          items:
            type: object
            properties: 
              elementType: 
                type: string
                description: either "experiment" or "task" or "filter"
              data:
                description: one of either task or experiment or filter (as defined by the elementtype). Experiments are expected to be not nested for more than one level. The first element in this 
                oneOf:
                  - $ref: '#/components/schemas/TaskInstance'
                  - $ref: '#/components/schemas/ExperimentInstance'
                  - $ref: '#/components/schemas/FilterInstance'
          description: Instances of tasks, further experiments or Filters, need to have instance IDs etc pp project back-reference, etc. The first element in this list will be assumed to be the starting element for this Experiment. Any element that does NOT have a next element being set will be assumed to be an end element. After which the instantiated experiments "next" element is called.

    DBExperiment: 
      allOf:
      - $ref : '#/components/schemas/DBElement'
      - type: object
        properties:
          elements:
            type: array
            items:
              type: string
              example: d290f1ee-6c54-4b01-90e6-d701748f0851
              description: UUIDs of elements that are in versions of this project. This is to ensure that no elements get deleted which are still referred to by a project
   
          
    Project:
      allOf:
      - $ref: '#/components/schemas/BasicElementData'
      - $ref: '#/components/schemas/ProjectElements'
      
    ProjectInstance:
      type: object
      properties:
        UUID: 
          type: string
          description: The unique Id of this instance
        sourceUUID: 
          type: string
          description: This is the ID of the source project of this instance.
        version:
          type: string
          description: The version of the project project in the git
        participants:
          type: array
          items:
            type: string
            description: the id of a participant of this project
        private:
          type: boolean
          description: whether access to this project is limited
        name:
          type: string 
          description: A unique name for this project
        shortcut:
          type: string
          description: "a shortcut string tht can be used for access via /e/shortcut"
        accessTokens:
          type: array
          items: 
            type: string
            description: random access tokens that can be used to get Read (i.e. execution) access to the project via the signup api endpoint). Once a token is used it is removed.
        permanentAccessToken:
          type: string
          description: a permanent access token that can be used to sign up to the project.
      description: This is an instance of a running project. This has a UUID which is going to be stored in the instance database. 
    ProjectElements:
      type: object
      properties:
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/TaskInstance'
          description: Instances of tasks, need to have instance IDs etc pp project back-reference, etc. 
        experiments:
          type: array
          items:
            $ref: '#/components/schemas/ExperimentInstance'
          description: Instances of experiments, need to have instance IDs etc pp project back-reference, etc. 
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterInstance'
          description: Instances of Filters, need to have instance IDs etc pp project back-reference, etc. 
        start:
          type: string
          example: t83297d7785fd249bdb6543a850680e812ce11873df2d48467cb9612dbd0482bf
          description: the initial experiment or Task for this project, must be the instanceID of the task or Experiment
    DBProject: 
      allOf:
      - $ref : '#/components/schemas/DBElement'
      - type: object
        properties:
          participants:
            type: array
            items:
              type: string
              description: the id of a participant of this project
          elements:
            type: array
            items:
              type: string
              example: d290f1ee-6c54-4b01-90e6-d701748f0851
              description: UUIDs of elements that are in versions of this project. This is to ensure that no elements get deleted which are still referred to by a project

    AvailableDataScheme:
      type: object
      properties:
        participants:
          type: array
          items: 
            type: object
            properties:
              participantID: 
                type: string
              finished:
                type: boolean
                description: whether the participant has finished the project
            description: The participants who are part of this project
        tasks:
          type: array
          items:
            type: object
            properties:
              taskID:
                type: string
                description: this is the UUID of the specified task WITHIN the Project. It is NOT the UUID of the task in the task library!
              taskName: 
                type: string
                description: the name of the task in the project. This might NOT be unique!
    ObtainDataScheme:
      oneOf:
        - type: object
          properties:
            participants:
              type: array
              items:
                type: string
                description: the IDs of the participant for which to download data
          description: download all available data for these participants
        - type: object
          properties:
            participant:
              type: string
              description: the IDs of the participant for which to download data
          description: download all available data for this participant
        - type: object
          properties:
            tasks:
              type: array
              items:
                type: string
                description: The instance UUID of the task 
          description: Download data for all participants for the given task.
        - type: object
          properties:
            task:
              type: string
              description: The instance UUID of the task 
          description: Download data for all participants for the given task.
      description: TODO, Allow individual file download for users and tasks.
    DBDownloadScheme:
      type: object
      properties:
        resultFiles: 
          type: array
          items:
            type: object
            properties:
              absolutePath:
                type: string
              originalFileName:
                type: string
              mimeType:
                type: string
        jsonDataLocation:
          type: object
          properties:
            filename:
              type: string
            nameInZip:
              type: string
            mimeType:
              type: string
        timeStamp:
          type: integer
          description: the time point at which this was created
        status:
          type: string
        errors: 
          type: array
          items:
            type: string
        activeDownloads:
          type: integer
        project:
          type: string
          description: the project for which this download was generated.
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    cookieAuth:
      type: apiKey
      in: cookie
      name: SoileAuthCookie
    tokenAuth:
      type: apiKey
      in: header
      name: INSTANCE-KEY
  responses:
    UnauthorizedError:
      description: User is not authenticated.      
    UserExists:  
      description: User already exists
      content:
        application/json:
          schema:
            type: object
            properties: 
              reason:
                type: string
                example: 'Username already exists'  
    LoginSuccessful:
      description: Successfull Login, Authentication information is supplied both in a cookie and a JWT Token. Cookie if the user requests to stay logged in. 
      headers:
        Set-Cookie:
          schema:
            type: string
            example: SoileAuthCookie='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
      content:
        application/json:
          schema:
            type: object
            properties: 
              Token:
                type: string
                example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
    UserDoesNotExist:
      description: User does not exist
      content:
        application/json:
          schema:
            type: object
            properties: 
              reason:
                type: string
                example: 'Specified user does not exist'
    ResourceDoesNotExist:
      description: Requested resource does not exist (invalid version or uuid)
      content:
        application/json:
          schema:
            type: object
            properties: 
              reason:
                type: string
                example: 'The requested task/project/experiment or the specified version does not exst'                
    AccessOfUser:
      description: Roles of a user
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
                example: MyUser
                description: Must not include any @ symbols
              role:
                type: string
                example: "Admin"
              permissions:
                type: object
                properties:
                  tasks:
                    $ref: '#/components/schemas/PermissionsSettings'
                  experiments:
                    $ref: '#/components/schemas/PermissionsSettings'
                  instances:
                    $ref: '#/components/schemas/PermissionsSettings'
                  projects:
                    $ref: '#/components/schemas/PermissionsSettings'
    ObjectUpdated:
      description: Update of Object successful, providing new version gitid.
      content:
        application/json:
          schema:
            type: object
            properties:
              version: 
                type: string
                description: the new version id of the updated Object. This will be a git commit hash.